// Progress
10 - started but need gRPC first
39 - skip to this clip because need to see it

// ---------------------------------------

// Get Postgres Image
docker pull postgres:latest

username: root
password: secret

// Run Postgres Image
docker run --name postgres12 -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=secret -d postgres:latest

// Acces Postres Container
// root user didn't worked out
docker exec -it postgres12 psql // -U postgres

// Get Logs for Postgres Container
docker logs postgres12

// ---------------------------------------

// Setup DB Migrations
Link to repo: https://github.com/golang-migrate/migrate/tree/master/cmd/migrate

curl -L https://github.com/golang-migrate/migrate/releases/download/v4.15.2/migrate.linux-386.tar.gz | tar xvz

./lib/migrate create -ext sql -dir db/migration -seq init_schema

docker exec -it postgres12 /bin/sh

createdb --username=postgres --owner=root simple_bank

docker exec -it postgres12 createdb --username=root --owner=root simple_bank
docker exec -it postgres12 psql -U root simple_bank

// Run migration
./lib/migrate -path db/migration -database "postgres://root:secret@localhost:5432/simple_bank?sslmode=disable" -verbose up

// Generating CRUD Golang code from SQL

./lib/sqlc version
./lib/sqlc help

// Run init and adjust the `sqlc.yaml` file to the current setup
./lib/sqlc init

./lib/sqlc generate

// ---------------------------------------

// setup transaction deadlock by running 2 postgres instances
// /docs/transfer_example.sql

// 1st instance
docker exec -it postgres12 psql -U root -d simple_bank
BEGIN;

// 2nd instance
docker exec -it postgres12 psql -U root -d simple_bank
BEGIN;

// in 2nd instance copy the 1st command "INSERT INTO transfers..."
// in 2nd instance copy the 2st command "INSERT INTO entries..."

// in 1st instance copy the 1st command "INSERT INTO transfers..."
// in 1st instance copy the 3rd command "INSERT INTO entries..."
// in 1st instance copy the 4th command "SELECT * FROM accounts..."
// now the transaction is blocked, waiting for transaction 2 to commit or rollback to continue.

// Try to fix
- comment out the foreign key constraint in sql file
- make migratedown
- make migrateup

// this will work but removing the constraints the data synchronization is lost

// revert the changes and try better approach
- make migratedown
- make migrateup

// check isolation level
docker exec -it postgres12 psql -U root -d simple_bank
show transaction isolation level;

// 1. set transaction to uncommitted in Postgres
begin;
simple_bank set transaction isolation level read uncommitted;

// 2. set transaction to committed in Postgres
begin;
simple_bank set transaction isolation level read committed;

// 3. set transaction to repeatable read in Postgres
begin;
simple_bank set transaction isolation level repeatable read;

// 4. set transaction to serializable in Postgres
begin;
simple_bank set transaction isolation level serializable;

// set per transaction isolation
select @@transaction_isolation;

// ---------------------------------------

Enviroment variable file loader -> viper

// ---------------------------------------

Mocking the DB by using package -> gomock

Installing by running:
go install github.com/golang/mock/mockgen@v1.6.0

Verify mockgen file is installed
ls -l ~/go/bin

Verify that mockgen has recognized runner
which mockgen

Add the golang executables to local user variables
Open the ".bash_profile" or ".bashrc" depending on what is already set
code ~/.bashrc

Add this line et the end of the file
export PATH=$PATH:~/go/bin

Reload the file
source ~/.bashrc

Verify that mockgen has recognized runner
which mockgen

Create mock for DB
mockgen -package mockdb -destination db/mock/store.go github.com/cosmiceon/go-simple-bank/db/sqlc Store

// ---------------------------------------

Create migration for the new Users table
./lib/migrate create -ext sql -dir db/migration -seq add_users

// ---------------------------------------

//create a gRPC build